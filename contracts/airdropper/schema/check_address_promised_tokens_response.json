{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "CheckAddressPromisedTokensResponse",
  "description": "Response object used to check an address' promised and claimed `token_id`s Promised `token_id`s should generally be used for 1:1s, other giveaways, etc",
  "type": "object",
  "required": [
    "address_claimed_token_ids",
    "address_promised_token_ids",
    "airdrop_mint_in_progress",
    "airdrop_mint_is_closed",
    "minter_addr"
  ],
  "properties": {
    "address_claimed_token_ids": {
      "description": "an address' claimed promised token ids",
      "type": "array",
      "items": {
        "type": "integer",
        "format": "uint32",
        "minimum": 0.0
      }
    },
    "address_promised_token_ids": {
      "description": "an address' promised token ids. These get removed once the user claims these token_ids (pull) or if an admin pushes the token_id to their address",
      "type": "array",
      "items": {
        "type": "integer",
        "format": "uint32",
        "minimum": 0.0
      }
    },
    "airdrop_mint_in_progress": {
      "description": "checks if airdrop is in progress",
      "type": "boolean"
    },
    "airdrop_mint_is_closed": {
      "description": "checks if airdrop is closed or not",
      "type": "boolean"
    },
    "minter_addr": {
      "description": "minter's address being checked",
      "allOf": [
        {
          "$ref": "#/definitions/Addr"
        }
      ]
    }
  },
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    }
  }
}
