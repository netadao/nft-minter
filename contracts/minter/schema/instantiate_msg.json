{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "InstantiateMsg",
  "type": "object",
  "required": [
    "base_fields",
    "collection_infos",
    "extension",
    "name",
    "token_code_id"
  ],
  "properties": {
    "airdrop_address": {
      "description": "airdropper address if it was manaully instantiated elsewhere",
      "type": [
        "string",
        "null"
      ]
    },
    "airdropper_instantiate_info": {
      "description": "airdropper instantiation info must have either or none against `airdrop_address`",
      "anyOf": [
        {
          "$ref": "#/definitions/ModuleInstantiateInfo"
        },
        {
          "type": "null"
        }
      ]
    },
    "base_fields": {
      "$ref": "#/definitions/BaseInitMsg"
    },
    "collection_infos": {
      "description": "vec of collection info",
      "type": "array",
      "items": {
        "$ref": "#/definitions/CollectionInfoMsg"
      }
    },
    "extension": {
      "description": "extension info that will be passed to",
      "allOf": [
        {
          "$ref": "#/definitions/SharedCollectionInfoMsg"
        }
      ]
    },
    "name": {
      "description": "name of nft project",
      "type": "string"
    },
    "token_code_id": {
      "description": "code id for cw721 contract",
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "whitelist_address": {
      "description": "whitelist address if it was manaully instantiated elsewhere",
      "type": [
        "string",
        "null"
      ]
    },
    "whitelist_instantiate_info": {
      "description": "whitelist contract instantiation info. must have either or none against `whitelist_address`",
      "anyOf": [
        {
          "$ref": "#/definitions/ModuleInstantiateInfo"
        },
        {
          "type": "null"
        }
      ]
    }
  },
  "definitions": {
    "Admin": {
      "description": "Information about the admin of a contract. may have been stolen from daodao",
      "oneOf": [
        {
          "description": "A specific address.",
          "type": "object",
          "required": [
            "address"
          ],
          "properties": {
            "address": {
              "type": "object",
              "required": [
                "address"
              ],
              "properties": {
                "address": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "The core contract itself. The contract will fill this in while instantiation takes place.",
          "type": "object",
          "required": [
            "core_contract"
          ],
          "properties": {
            "core_contract": {
              "type": "object"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "No admin.",
          "type": "object",
          "required": [
            "none"
          ],
          "properties": {
            "none": {
              "type": "object"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "BaseInitMsg": {
      "description": "Base fields that are used for instantiation dual purpose: also used for update config funciton",
      "type": "object",
      "required": [
        "bundle_enabled",
        "bundle_mint_price",
        "escrow_funds",
        "max_per_address_bundle_mint",
        "max_per_address_mint",
        "mint_denom",
        "mint_price",
        "start_time"
      ],
      "properties": {
        "bundle_enabled": {
          "type": "boolean"
        },
        "bundle_mint_price": {
          "$ref": "#/definitions/Uint128"
        },
        "end_time": {
          "description": "hard stop for public mint TODO: move to optional? TODO: allow admin/maintainer to update this if needed",
          "anyOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "type": "null"
            }
          ]
        },
        "escrow_funds": {
          "description": "determines if you want to escrow funds or just send funds per tx",
          "type": "boolean"
        },
        "maintainer_address": {
          "description": "alternate address for maintaining/management of this contract",
          "type": [
            "string",
            "null"
          ]
        },
        "max_per_address_bundle_mint": {
          "description": "max bundles per address",
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "max_per_address_mint": {
          "description": "max mint per address",
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "mint_denom": {
          "description": "only native and ibc/ denoms are allowed. onus is on user to verify if they manually instantiate this contract. otherwise, controlled via frontend",
          "type": "string"
        },
        "mint_price": {
          "description": "mint price fee for PUBLIC mint. This can be overridden by WL mint_price",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "start_time": {
          "description": "start time for the public mint portion of the campaign. this will hard stop the WL campaign",
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            }
          ]
        }
      }
    },
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>",
      "type": "string"
    },
    "CollectionInfoMsg": {
      "type": "object",
      "required": [
        "base_token_uri",
        "name",
        "symbol",
        "token_supply"
      ],
      "properties": {
        "base_token_uri": {
          "description": "uri for the metadata. intended to be a static metadata for the nft",
          "type": "string"
        },
        "name": {
          "description": "name of nft project",
          "type": "string"
        },
        "secondary_metadata_uri": {
          "description": "optional secondary metadata resource that is intended to be dynamic and extensible to the creator's desires",
          "type": [
            "string",
            "null"
          ]
        },
        "symbol": {
          "description": "symbol for nft project, this seems really optional for cw721 standard",
          "type": "string"
        },
        "token_supply": {
          "description": "token supply for this collection",
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        }
      }
    },
    "ModuleInstantiateInfo": {
      "description": "Information needed to instantiate a submodule.",
      "type": "object",
      "required": [
        "admin",
        "code_id",
        "label",
        "msg"
      ],
      "properties": {
        "admin": {
          "description": "Admin of the instantiated contract.",
          "allOf": [
            {
              "$ref": "#/definitions/Admin"
            }
          ]
        },
        "code_id": {
          "description": "Code ID of the contract to be instantiated.",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "label": {
          "description": "Label for the instantiated contract.",
          "type": "string"
        },
        "msg": {
          "description": "Instantiate message to be used to create the contract.",
          "allOf": [
            {
              "$ref": "#/definitions/Binary"
            }
          ]
        }
      }
    },
    "RoyaltyInfoMsg": {
      "type": "object",
      "required": [
        "address",
        "bps",
        "is_primary"
      ],
      "properties": {
        "address": {
          "description": "address that receives this split",
          "type": "string"
        },
        "bps": {
          "description": "this address' basis points to calculate the total split of revenue",
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "is_primary": {
          "description": "is_primary is the primary address and will receive the remaining dust from rev splits",
          "type": "boolean"
        }
      }
    },
    "SharedCollectionInfoMsg": {
      "description": "Shared Collection Info that stores revenue/royalty split as well the optional secondary metadata uri that will allow creators to add evolving metadata in addition to the static metadata that is in `base_token_uri`",
      "type": "object",
      "required": [
        "mint_revenue_share",
        "secondary_market_royalties"
      ],
      "properties": {
        "mint_revenue_share": {
          "description": "initial sales split. has a hardcap of 10000 bps equating to 100.00%",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RoyaltyInfoMsg"
          }
        },
        "secondary_market_royalties": {
          "description": "secondary sales royalty split. hardcap of 5000bps equating to 50.00% so the token owner gets roughly 50% of the sales revenue in the case of \"free mints\"",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RoyaltyInfoMsg"
          }
        }
      }
    },
    "Timestamp": {
      "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
      "allOf": [
        {
          "$ref": "#/definitions/Uint64"
        }
      ]
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "Uint64": {
      "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
      "type": "string"
    }
  }
}
