{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "GetConfigResponse",
  "type": "object",
  "required": [
    "admin",
    "bundle_completed",
    "bundle_enabled",
    "bundle_mint_price",
    "extension",
    "max_per_address_bundle_mint",
    "max_per_address_mint",
    "mint_denom",
    "mint_price",
    "start_time",
    "token_code_id",
    "total_token_supply"
  ],
  "properties": {
    "admin": {
      "description": "admin address for this contract. has special permissions in contract",
      "allOf": [
        {
          "$ref": "#/definitions/Addr"
        }
      ]
    },
    "airdropper_addr": {
      "description": "address to contract that we'll read promised mints and token_ids data from",
      "anyOf": [
        {
          "$ref": "#/definitions/Addr"
        },
        {
          "type": "null"
        }
      ]
    },
    "bundle_completed": {
      "type": "boolean"
    },
    "bundle_enabled": {
      "type": "boolean"
    },
    "bundle_mint_price": {
      "$ref": "#/definitions/Uint128"
    },
    "end_time": {
      "description": "public mint end time. TODO: migrate to optional?",
      "anyOf": [
        {
          "$ref": "#/definitions/Timestamp"
        },
        {
          "type": "null"
        }
      ]
    },
    "extension": {
      "description": "data we'll pass to the cw721 contract when a token is minted",
      "allOf": [
        {
          "$ref": "#/definitions/SharedCollectionInfo"
        }
      ]
    },
    "maintainer_addr": {
      "description": "alternate manager of this contract",
      "anyOf": [
        {
          "$ref": "#/definitions/Addr"
        },
        {
          "type": "null"
        }
      ]
    },
    "max_per_address_bundle_mint": {
      "description": "max bundles per address",
      "type": "integer",
      "format": "uint32",
      "minimum": 0.0
    },
    "max_per_address_mint": {
      "description": "maximum mints per address",
      "type": "integer",
      "format": "uint32",
      "minimum": 0.0
    },
    "mint_denom": {
      "description": "only native and ibc/ denoms are allowed. onus is on user to verify if they manually instantiate this contract. otherwise, controlled via frontend",
      "type": "string"
    },
    "mint_price": {
      "description": "mint price for the public mint",
      "allOf": [
        {
          "$ref": "#/definitions/Uint128"
        }
      ]
    },
    "start_time": {
      "description": "public mint start time",
      "allOf": [
        {
          "$ref": "#/definitions/Timestamp"
        }
      ]
    },
    "token_code_id": {
      "description": "cw721 contract code id",
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "total_token_supply": {
      "description": "maximum token supply TODO: move to uncapped for special project",
      "type": "integer",
      "format": "uint32",
      "minimum": 0.0
    },
    "whitelist_addr": {
      "description": "address to contract that we'll read whitelist data from",
      "anyOf": [
        {
          "$ref": "#/definitions/Addr"
        },
        {
          "type": "null"
        }
      ]
    }
  },
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "RoyaltyInfo": {
      "type": "object",
      "required": [
        "addr",
        "bps",
        "is_primary"
      ],
      "properties": {
        "addr": {
          "$ref": "#/definitions/Addr"
        },
        "bps": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "is_primary": {
          "type": "boolean"
        }
      }
    },
    "SharedCollectionInfo": {
      "type": "object",
      "required": [
        "mint_revenue_share",
        "secondary_market_royalties"
      ],
      "properties": {
        "mint_revenue_share": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RoyaltyInfo"
          }
        },
        "secondary_market_royalties": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RoyaltyInfo"
          }
        }
      }
    },
    "Timestamp": {
      "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
      "allOf": [
        {
          "$ref": "#/definitions/Uint64"
        }
      ]
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "Uint64": {
      "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
      "type": "string"
    }
  }
}
